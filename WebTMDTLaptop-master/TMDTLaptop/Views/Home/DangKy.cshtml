@{
    ViewBag.Title = "DangKy";
    Layout = "~/Views/Shared/_LayoutHome.cshtml";
}

<!-- Breadcrumb Section -->
<section class="breadcrumb-section position-relative overflow-hidden">
    <div class="breadcrumb-bg"></div>
    <div class="breadcrumb-overlay"></div>
    <div class="container position-relative">
        <div class="row">
            <div class="col-12">
                <div class="breadcrumb-content text-white text-center">
                    <h1 class="display-4 fw-bold mb-3 animate__animated animate__fadeInUp">Đăng ký</h1>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb justify-content-center mb-0 animate__animated animate__fadeInUp animate__delay-1s">
                            <li class="breadcrumb-item">
                                <a href="@Url.Action("Index", "Home")" class="text-white-50 text-decoration-none">
                                    <i class="fas fa-home me-1"></i>Trang chủ
                                </a>
                            </li>
                            <li class="breadcrumb-item active text-white" aria-current="page">
                                Đăng ký
                            </li>
                        </ol>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Register Section -->
<section class="register-section py-5">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-8 col-xl-7">
                <div class="register-card card border-0 shadow-lg">
                    <div class="card-header bg-primary text-white text-center p-4">
                        <h3 class="mb-0 fw-bold">
                            <i class="fas fa-user-plus me-2"></i>
                            Tạo tài khoản mới
                        </h3>
                        <p class="mb-0 mt-2 opacity-75">Điền thông tin để tạo tài khoản của bạn</p>
                    </div>

                    <div class="card-body p-5">
                        <!-- Validation Summary -->
                        @if (!ViewData.ModelState.IsValid)
                        {
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                <h6 class="alert-heading">
                                    <i class="fas fa-exclamation-triangle me-2"></i>
                                    Vui lòng kiểm tra lại thông tin:
                                </h6>
                                @Html.ValidationSummary(true, "", new { @class = "mb-0" })
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            </div>
                        }

                        <form action="@Url.Action("DangKy", "Home")" method="post" id="registerForm" novalidate>
                            <!-- Personal Information -->
                            <div class="form-section mb-5">
                                <h5 class="section-title text-primary mb-4">
                                    <i class="fas fa-user me-2"></i>
                                    Thông tin cá nhân
                                </h5>

                                <div class="row g-3">
                                    <!-- Full Name -->
                                    <div class="col-12">
                                        <div class="form-floating">
                                            <input type="text" class="form-control @(ViewData.ModelState.ContainsKey("HoTen") && ViewData.ModelState["HoTen"].Errors.Count > 0 ? "is-invalid" : "")"
                                                   id="HoTen" name="HoTen" placeholder="Nhập họ và tên" required
                                                   value="@ViewData["HoTen"]">
                                            <label for="HoTen">
                                                <i class="fas fa-id-card me-2 text-primary"></i>Họ và tên
                                                <span class="text-danger">*</span>
                                            </label>
                                            @if (ViewData.ModelState.ContainsKey("HoTen") && ViewData.ModelState["HoTen"].Errors.Count > 0)
                                            {
                                                <div class="invalid-feedback">
                                                    @ViewData.ModelState["HoTen"].Errors[0].ErrorMessage
                                                </div>
                                            }
                                        </div>
                                    </div>

                                    <!-- Username -->
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <input type="text" class="form-control @(ViewData.ModelState.ContainsKey("Username") && ViewData.ModelState["Username"].Errors.Count > 0 ? "is-invalid" : "")"
                                                   id="Username" name="Username" placeholder="Nhập tên đăng nhập" required
                                                   value="@ViewData["Username"]">
                                            <label for="Username">
                                                <i class="fas fa-user me-2 text-primary"></i>Tên đăng nhập
                                                <span class="text-danger">*</span>
                                            </label>
                                            @if (ViewData.ModelState.ContainsKey("Username") && ViewData.ModelState["Username"].Errors.Count > 0)
                                            {
                                                <div class="invalid-feedback">
                                                    @ViewData.ModelState["Username"].Errors[0].ErrorMessage
                                                </div>
                                            }
                                            <div class="form-text">
                                                <i class="fas fa-info-circle me-1"></i>
                                                Chỉ chấp nhận chữ, số và dấu gạch dưới
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Email -->
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <input type="email" class="form-control @(ViewData.ModelState.ContainsKey("Email") && ViewData.ModelState["Email"].Errors.Count > 0 ? "is-invalid" : "")"
                                                   id="Email" name="Email" placeholder="Nhập email" required
                                                   value="@ViewData["Email"]">
                                            <label for="Email">
                                                <i class="fas fa-envelope me-2 text-primary"></i>Email
                                                <span class="text-danger">*</span>
                                            </label>
                                            @if (ViewData.ModelState.ContainsKey("Email") && ViewData.ModelState["Email"].Errors.Count > 0)
                                            {
                                                <div class="invalid-feedback">
                                                    @ViewData.ModelState["Email"].Errors[0].ErrorMessage
                                                </div>
                                            }
                                        </div>
                                    </div>

                                    <!-- Phone -->
                                    <div class="col-12">
                                        <div class="form-floating">
                                            <input type="tel" class="form-control @(ViewData.ModelState.ContainsKey("SoDienThoai") && ViewData.ModelState["SoDienThoai"].Errors.Count > 0 ? "is-invalid" : "")"
                                                   id="SoDienThoai" name="SoDienThoai" placeholder="Nhập số điện thoại" required
                                                   value="@ViewData["SoDienThoai"]">
                                            <label for="SoDienThoai">
                                                <i class="fas fa-phone me-2 text-primary"></i>Số điện thoại
                                                <span class="text-danger">*</span>
                                            </label>
                                            @if (ViewData.ModelState.ContainsKey("SoDienThoai") && ViewData.ModelState["SoDienThoai"].Errors.Count > 0)
                                            {
                                                <div class="invalid-feedback">
                                                    @ViewData.ModelState["SoDienThoai"].Errors[0].ErrorMessage
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Address Information -->
                            <div class="form-section mb-5">
                                <h5 class="section-title text-primary mb-4">
                                    <i class="fas fa-map-marker-alt me-2"></i>
                                    Thông tin địa chỉ
                                </h5>

                                <div class="row g-3 mb-3">
                                    <!-- Province -->
                                    <div class="col-md-4">
                                        <div class="form-floating">
                                            <select class="form-select" id="province" onchange="loadDistricts()" required>
                                                <option value="">Chọn...</option>
                                            </select>
                                            <label for="province">
                                                <i class="fas fa-map me-2 text-primary"></i>Tỉnh/Thành phố
                                                <span class="text-danger">*</span>
                                            </label>
                                        </div>
                                    </div>

                                    <!-- District -->
                                    <div class="col-md-4">
                                        <div class="form-floating">
                                            <select class="form-select" id="district" disabled onchange="loadWards()" required>
                                                <option value="">Chọn...</option>
                                            </select>
                                            <label for="district">
                                                <i class="fas fa-building me-2 text-primary"></i>Quận/Huyện
                                                <span class="text-danger">*</span>
                                            </label>
                                        </div>
                                    </div>

                                    <!-- Ward -->
                                    <div class="col-md-4">
                                        <div class="form-floating">
                                            <select class="form-select" id="ward" disabled onchange="updateFullAddress()" required>
                                                <option value="">Chọn...</option>
                                            </select>
                                            <label for="ward">
                                                <i class="fas fa-home me-2 text-primary"></i>Phường/Xã
                                                <span class="text-danger">*</span>
                                            </label>
                                        </div>
                                    </div>
                                </div>

                                <!-- Address Detail -->
                                <div class="form-floating mb-3">
                                    <input type="text" class="form-control" id="addressDetail"
                                           placeholder="Số nhà, tên đường" required>
                                    <label for="addressDetail">
                                        <i class="fas fa-road me-2 text-primary"></i>Địa chỉ chi tiết
                                        <span class="text-danger">*</span>
                                    </label>
                                    <div class="form-text">
                                        <i class="fas fa-info-circle me-1"></i>
                                        Ví dụ: 123 Đường ABC, Khu phố 1
                                    </div>
                                </div>

                                <!-- Full Address Preview -->
                                <div class="address-preview card bg-light">
                                    <div class="card-body p-3">
                                        <h6 class="card-title mb-2">
                                            <i class="fas fa-eye me-2 text-info"></i>
                                            Xem trước địa chỉ:
                                        </h6>
                                        <p class="card-text" id="addressPreview">
                                            <em class="text-muted">Vui lòng chọn địa chỉ...</em>
                                        </p>
                                    </div>
                                </div>

                                <!-- Hidden field for full address -->
                                <input type="hidden" name="DiaChi" id="fullAddress">
                                @if (ViewData.ModelState.ContainsKey("DiaChi") && ViewData.ModelState["DiaChi"].Errors.Count > 0)
                                {
                                    <div class="text-danger mt-2">
                                        <i class="fas fa-exclamation-triangle me-1"></i>
                                        @ViewData.ModelState["DiaChi"].Errors[0].ErrorMessage
                                    </div>
                                }
                            </div>

                            <!-- Password Section -->
                            <div class="form-section mb-5">
                                <h5 class="section-title text-primary mb-4">
                                    <i class="fas fa-lock me-2"></i>
                                    Thông tin bảo mật
                                </h5>

                                <div class="row g-3">
                                    <!-- Password -->
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <input type="password" class="form-control @(ViewData.ModelState.ContainsKey("Password") && ViewData.ModelState["Password"].Errors.Count > 0 ? "is-invalid" : "")"
                                                   id="Password" name="Password" placeholder="Nhập mật khẩu" required>
                                            <label for="Password">
                                                <i class="fas fa-key me-2 text-primary"></i>Mật khẩu
                                                <span class="text-danger">*</span>
                                            </label>
                                            @if (ViewData.ModelState.ContainsKey("Password") && ViewData.ModelState["Password"].Errors.Count > 0)
                                            {
                                                <div class="invalid-feedback">
                                                    @ViewData.ModelState["Password"].Errors[0].ErrorMessage
                                                </div>
                                            }
                                        </div>
                                        <!-- Password Strength Indicator -->
                                        <div class="password-strength mt-2">
                                            <div class="progress" style="height: 5px;">
                                                <div class="progress-bar" role="progressbar" id="passwordStrength"></div>
                                            </div>
                                            <small class="form-text" id="passwordFeedback"></small>
                                        </div>
                                    </div>

                                    <!-- Confirm Password -->
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <input type="password" class="form-control @(ViewData.ModelState.ContainsKey("XacNhanMatKhau") && ViewData.ModelState["XacNhanMatKhau"].Errors.Count > 0 ? "is-invalid" : "")"
                                                   id="XacNhanMatKhau" name="XacNhanMatKhau" placeholder="Nhập lại mật khẩu" required>
                                            <label for="XacNhanMatKhau">
                                                <i class="fas fa-check-circle me-2 text-primary"></i>Xác nhận mật khẩu
                                                <span class="text-danger">*</span>
                                            </label>
                                            @if (ViewData.ModelState.ContainsKey("XacNhanMatKhau") && ViewData.ModelState["XacNhanMatKhau"].Errors.Count > 0)
                                            {
                                                <div class="invalid-feedback">
                                                    @ViewData.ModelState["XacNhanMatKhau"].Errors[0].ErrorMessage
                                                </div>
                                            }
                                            <div class="invalid-feedback" id="passwordMismatch">
                                                Mật khẩu xác nhận không khớp
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Password Requirements -->
                                <div class="password-requirements mt-3">
                                    <small class="text-muted">
                                        <strong>Yêu cầu mật khẩu:</strong>
                                    </small>
                                    <ul class="requirements-list">
                                        <li class="requirement" id="req-length">
                                            <i class="fas fa-times text-danger me-2"></i>Ít nhất 6 ký tự
                                        </li>
                                        <li class="requirement" id="req-uppercase">
                                            <i class="fas fa-times text-danger me-2"></i>Có chữ hoa
                                        </li>
                                        <li class="requirement" id="req-lowercase">
                                            <i class="fas fa-times text-danger me-2"></i>Có chữ thường
                                        </li>
                                        <li class="requirement" id="req-number">
                                            <i class="fas fa-times text-danger me-2"></i>Có số
                                        </li>
                                    </ul>
                                </div>
                            </div>

                            <!-- Terms and Submit -->
                            <div class="form-section">
                                <!-- Terms Checkbox -->
                                <div class="form-check mb-4">
                                    <input class="form-check-input" type="checkbox" id="terms" required>
                                    <label class="form-check-label" for="terms">
                                        Tôi đồng ý với
                                        <a href="#" class="text-primary text-decoration-none">Điều khoản dịch vụ</a>
                                        và
                                        <a href="#" class="text-primary text-decoration-none">Chính sách bảo mật</a>
                                        <span class="text-danger">*</span>
                                    </label>
                                </div>

                                <!-- Submit Button -->
                                <div class="d-grid mb-3">
                                    <button class="btn btn-primary btn-lg py-3 submit-btn" type="submit" id="submitBtn">
                                        <i class="fas fa-user-plus me-2"></i>
                                        <span class="btn-text">Tạo tài khoản</span>
                                        <span class="spinner-border spinner-border-sm d-none ms-2" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </span>
                                    </button>
                                </div>

                                <!-- Login Link -->
                                <div class="text-center">
                                    <p class="mb-0">
                                        Đã có tài khoản?
                                        <a href="@Url.Action("DangNhap", "Home")" class="text-primary text-decoration-none fw-bold">
                                            Đăng nhập ngay
                                        </a>
                                    </p>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<style>
/* Register Page Custom Styles */
:root {
    --primary-color: #0d6efd;
    --success-color: #198754;
    --danger-color: #dc3545;
    --warning-color: #ffc107;
    --info-color: #0dcaf0;
    --light-color: #f8f9fa;
    --dark-color: #212529;
    --transition: all 0.3s ease;
}

/* Breadcrumb Section */
.breadcrumb-section {
    min-height: 250px;
    display: flex;
    align-items: center;
}

.breadcrumb-bg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: url('@Url.Content("~/assets/images/banner/banner3.jpg")') center/cover no-repeat;
    z-index: -2;
}

.breadcrumb-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, rgba(13, 110, 253, 0.8), rgba(25, 135, 84, 0.4));
    z-index: -1;
}

/* Register Section */
.register-section {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    min-height: 100vh;
}

.register-card {
    border-radius: 20px !important;
    overflow: hidden;
}

.register-card .card-header {
    background: linear-gradient(135deg, var(--primary-color), #0056b3) !important;
    border-bottom: none;
}

.register-card .card-body {
    background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
}

/* Form Sections */
.form-section {
    position: relative;
}

.section-title {
    border-bottom: 2px solid var(--primary-color);
    padding-bottom: 0.5rem;
    margin-bottom: 1.5rem !important;
}

/* Form Controls */
.form-floating > .form-control,
.form-floating > .form-select {
    border: 2px solid #e9ecef;
    border-radius: 12px;
    transition: var(--transition);
    font-size: 1rem;
}

.form-floating > .form-control:focus,
.form-floating > .form-select:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.15);
    transform: translateY(-2px);
}

.form-floating > label {
    padding: 1rem 0.75rem;
    font-weight: 500;
    color: var(--dark-color);
}

.form-floating > .form-control:focus ~ label,
.form-floating > .form-control:not(:placeholder-shown) ~ label,
.form-floating > .form-select:focus ~ label,
.form-floating > .form-select:not([value=""]) ~ label {
    color: var(--primary-color);
}

/* Address Preview */
.address-preview {
    border-radius: 12px;
    border: 2px dashed var(--primary-color);
    background: rgba(13, 110, 253, 0.05) !important;
    transition: var(--transition);
}

.address-preview:hover {
    background: rgba(13, 110, 253, 0.1) !important;
}

/* Password Strength */
.password-strength .progress {
    border-radius: 10px;
    background-color: #e9ecef;
}

.password-strength .progress-bar {
    transition: var(--transition);
    border-radius: 10px;
}

.password-strength .progress-bar.weak {
    background-color: var(--danger-color);
    width: 25%;
}

.password-strength .progress-bar.fair {
    background-color: var(--warning-color);
    width: 50%;
}

.password-strength .progress-bar.good {
    background-color: var(--info-color);
    width: 75%;
}

.password-strength .progress-bar.strong {
    background-color: var(--success-color);
    width: 100%;
}

/* Password Requirements */
.requirements-list {
    list-style: none;
    padding: 0;
    margin: 0.5rem 0;
}

.requirement {
    padding: 0.25rem 0;
    font-size: 0.9rem;
    transition: var(--transition);
}

.requirement.met i {
    color: var(--success-color) !important;
}

.requirement.met i:before {
    content: "\f00c"; /* fa-check */
}

/* Form Validation */
.was-validated .form-control:valid,
.form-control.is-valid {
    border-color: var(--success-color);
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='m2.3 6.73.94-.94 1.78 1.78 3.58-3.58.94.94-4.52 4.52z'/%3e%3c/svg%3e");
}

.was-validated .form-control:invalid,
.form-control.is-invalid {
    border-color: var(--danger-color);
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath d='m5.8 4.6 2.4 2.4M8.2 4.6 5.8 7'/%3e%3c/svg%3e");
}

/* Submit Button */
.submit-btn {
    border-radius: 50px !important;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 1px;
    transition: var(--transition);
    position: relative;
    overflow: hidden;
}

.submit-btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 25px rgba(13, 110, 253, 0.3);
}

.submit-btn.loading .btn-text {
    opacity: 0;
}

.submit-btn.loading .spinner-border {
    display: inline-block !important;
}

/* Form Check */
.form-check-input {
    border-radius: 6px;
    border: 2px solid #dee2e6;
    transition: var(--transition);
}

.form-check-input:checked {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
}

.form-check-input:focus {
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
}

/* Loading States */
.form-control:disabled,
.form-select:disabled {
    background-color: #f8f9fa;
    opacity: 0.7;
}

/* Animations */
keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.animate__animated {
    animation-duration: 1s;
    animation-fill-mode: both;
}

.animate__fadeInUp {
    animation-name: fadeInUp;
}

.animate__delay-1s {
    animation-delay: 1s;
}

/* Responsive Design */
media (max-width: 768px) {
    .breadcrumb-section {
        min-height: 180px;
    }

    .register-card .card-body {
        padding: 2rem !important;
    }

    .form-floating > .form-control,
    .form-floating > .form-select {
        font-size: 0.9rem;
    }

    .requirements-list {
        font-size: 0.8rem;
    }
}

media (max-width: 576px) {
    .breadcrumb-content h1 {
        font-size: 2rem;
    }

    .register-card .card-body {
        padding: 1.5rem !important;
    }

    .register-card .card-header {
        padding: 1.5rem !important;
    }

    .section-title {
        font-size: 1.1rem;
    }
}

/* Success Animation */
keyframes checkmark {
    0% {
        transform: scale(0);
        opacity: 0;
    }
    50% {
        transform: scale(1.2);
        opacity: 1;
    }
    100% {
        transform: scale(1);
        opacity: 1;
    }
}

.success-icon {
    animation: checkmark 0.6s ease-in-out;
}
</style>

<script>
    // Global variables
    let provinces = [];
    let districts = [];
    let wards = [];
    let currentAddress = "";

    document.addEventListener('DOMContentLoaded', function () {
        // Load provinces on page load
        loadProvinces();

        // Initialize form validation
        initializeFormValidation();

        // Initialize password strength checker
        initializePasswordStrength();

        // Form submission handling
        const form = document.getElementById('registerForm');
        const submitBtn = document.getElementById('submitBtn');

        form.addEventListener('submit', function (e) {
            updateFullAddress();

            if (!this.checkValidity()) {
                e.preventDefault();
                e.stopPropagation();
                showToast('Vui lòng kiểm tra và điền đầy đủ thông tin', 'error');
            } else {
                // Add loading state
                submitBtn.classList.add('loading');
                submitBtn.querySelector('.spinner-border').classList.remove('d-none');
                submitBtn.disabled = true;
            }

            this.classList.add('was-validated');
        });

        // Phone number formatting
        const phoneInput = document.getElementById('SoDienThoai');
        phoneInput.addEventListener('input', function () {
            let value = this.value.replace(/\D/g, '');
            if (value.length >= 10) {
                value = value.replace(/(\d{3})(\d{3})(\d{4})/, '$1 $2 $3');
            }
            this.value = value;
        });

        // Address detail input handler
        const addressDetailInput = document.getElementById('addressDetail');
        addressDetailInput.addEventListener('input', updateFullAddress);
    });

    // Load provinces from API
    function loadProvinces() {
        showLoadingState('province', true);
        const provinceSelect = document.getElementById('province');
        console.log('Current state:', {
            disabled: provinceSelect.disabled,
            innerHTML: provinceSelect.innerHTML,
            optionsLength: provinceSelect.options.length
        });

        // Force enable để test
        provinceSelect.disabled = false;
        console.log('After force enable:', provinceSelect.disabled);

        // Test API
        fetch('https://provinces.open-api.vn/api/p/')
            .then(r => r.json())
            .then(data => console.log('API works:', data.length))
            .catch(e => console.error('API error:', e));
        fetch('https://provinces.open-api.vn/api/p/')
            .then(response => response.json())
            .then(data => {
                provinces = data;
                const provinceSelect = document.getElementById('province');

                provinceSelect.innerHTML = '<option value="">Chọn Tỉnh/Thành phố</option>';

                provinces.forEach(province => {
                    const option = document.createElement('option');
                    option.value = province.code;
                    option.textContent = province.name;
                    provinceSelect.appendChild(option);
                });

                showLoadingState('province', false);
            })
            .catch(error => {
                console.error('Error loading provinces:', error);
                showToast('Không thể tải danh sách tỉnh/thành phố. Vui lòng thử lại.', 'error');
                showLoadingState('province', false);
            });
    }

    // Load districts based on selected province
    function loadDistricts() {
        const provinceCode = document.getElementById('province').value;
        const districtSelect = document.getElementById('district');
        const wardSelect = document.getElementById('ward');

        // Reset dependent dropdowns
        districtSelect.innerHTML = '<option value="">Chọn Quận/Huyện</option>';
        wardSelect.innerHTML = '<option value="">Chọn Phường/Xã</option>';
        wardSelect.disabled = true;

        if (!provinceCode) {
            districtSelect.disabled = true;
            updateFullAddress();
            return;
        }

        showLoadingState('district', true);

        fetch(`https://provinces.open-api.vn/api/p/${provinceCode}?depth=3`)
            .then(response => response.json())
            .then(data => {
                districts = data.districts;

                districts.forEach(district => {
                    const option = document.createElement('option');
                    option.value = district.code;
                    option.textContent = district.name;
                    districtSelect.appendChild(option);
                });

                districtSelect.disabled = false;
                showLoadingState('district', false);
                updateFullAddress();
            })
            .catch(error => {
                console.error('Error loading districts:', error);
                showToast('Không thể tải danh sách quận/huyện. Vui lòng thử lại.', 'error');
                districtSelect.disabled = true;
                showLoadingState('district', false);
            });
    }

    // Load wards based on selected district
    function loadWards() {
        const districtCode = document.getElementById('district').value;
        const wardSelect = document.getElementById('ward');

        wardSelect.innerHTML = '<option value="">Chọn Phường/Xã</option>';

        if (!districtCode) {
            wardSelect.disabled = true;
            updateFullAddress();
            return;
        }

        const selectedDistrict = districts.find(d => d.code == districtCode);

        if (selectedDistrict && selectedDistrict.wards) {
            selectedDistrict.wards.forEach(ward => {
                const option = document.createElement('option');
                option.value = ward.code;
                option.textContent = ward.name;
                wardSelect.appendChild(option);
            });

            wardSelect.disabled = false;
        } else {
            wardSelect.disabled = true;
        }

        updateFullAddress();
    }

    // Update full address preview and hidden field
    function updateFullAddress() {
        const provinceSelect = document.getElementById('province');
        const districtSelect = document.getElementById('district');
        const wardSelect = document.getElementById('ward');
        const addressDetail = document.getElementById('addressDetail').value.trim();
        const fullAddressInput = document.getElementById('fullAddress');
        const addressPreview = document.getElementById('addressPreview');

        let addressParts = [];

        if (addressDetail) addressParts.push(addressDetail);

        if (wardSelect.value) {
            const selectedDistrict = districts.find(d => d.code == districtSelect.value);
            const selectedWard = selectedDistrict?.wards?.find(w => w.code == wardSelect.value);
            if (selectedWard) addressParts.push(selectedWard.name);
        }

        if (districtSelect.value) {
            const selectedDistrict = districts.find(d => d.code == districtSelect.value);
            if (selectedDistrict) addressParts.push(selectedDistrict.name);
        }

        if (provinceSelect.value) {
            const selectedProvince = provinces.find(p => p.code == provinceSelect.value);
            if (selectedProvince) addressParts.push(selectedProvince.name);
        }

        const fullAddress = addressParts.join(', ');
        fullAddressInput.value = fullAddress;

        if (fullAddress) {
            addressPreview.innerHTML = `<strong>${fullAddress}</strong>`;
            addressPreview.parentElement.classList.remove('bg-light');
            addressPreview.parentElement.classList.add('bg-success', 'bg-opacity-10', 'border-success');
        } else {
            addressPreview.innerHTML = '<em class="text-muted">Vui lòng chọn địa chỉ...</em>';
            addressPreview.parentElement.classList.remove('bg-success', 'bg-opacity-10', 'border-success');
            addressPreview.parentElement.classList.add('bg-light');
        }
    }

    // Show loading state for select elements
    function showLoadingState(selectId, isLoading) {
        const select = document.getElementById(selectId);
        if (isLoading) {
            select.innerHTML = '<option value="">Đang tải...</option>';
            select.disabled = true;
        }
    }

    // Initialize form validation
    function initializeFormValidation() {
        // Real-time validation for all inputs
        const inputs = document.querySelectorAll('input, select');
        inputs.forEach(input => {
            input.addEventListener('blur', function () {
                validateField(this);
            });

            input.addEventListener('input', function () {
                if (this.classList.contains('is-invalid')) {
                    validateField(this);
                }
            });
        });

        // Username validation
        const usernameInput = document.getElementById('Username');
        usernameInput.addEventListener('input', function () {
            const value = this.value;
            const regex = /^[a-zA-Z0-9_]+$/;

            if (value && !regex.test(value)) {
                this.setCustomValidity('Chỉ chấp nhận chữ, số và dấu gạch dưới');
            } else if (value.length < 3) {
                this.setCustomValidity('Tên đăng nhập phải có ít nhất 3 ký tự');
            } else {
                this.setCustomValidity('');
            }
        });

        // Email validation
        const emailInput = document.getElementById('Email');
        emailInput.addEventListener('input', function () {
            const emailRegex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
            if (this.value && !emailRegex.test(this.value)) {
                this.setCustomValidity('Vui lòng nhập email hợp lệ');
            } else {
                this.setCustomValidity('');
            }
        });

        // Phone validation
        const phoneInput = document.getElementById('SoDienThoai');
        phoneInput.addEventListener('input', function () {
            const phoneRegex = /^[0-9\s]{10,11}$/;
            const cleanPhone = this.value.replace(/\s/g, '');

            if (cleanPhone && !phoneRegex.test(cleanPhone)) {
                this.setCustomValidity('Số điện thoại không hợp lệ');
            } else {
                this.setCustomValidity('');
            }
        });
    }

    // Validate individual field
    function validateField(field) {
        if (field.checkValidity()) {
            field.classList.remove('is-invalid');
            field.classList.add('is-valid');
        } else {
            field.classList.remove('is-valid');
            field.classList.add('is-invalid');
        }
    }

    // Initialize password strength checker
    function initializePasswordStrength() {
        const passwordInput = document.getElementById('Password');
        const confirmInput = document.getElementById('XacNhanMatKhau');
        const strengthBar = document.getElementById('passwordStrength');
        const feedback = document.getElementById('passwordFeedback');
        const requirements = {
            length: document.getElementById('req-length'),
            uppercase: document.getElementById('req-uppercase'),
            lowercase: document.getElementById('req-lowercase'),
            number: document.getElementById('req-number')
        };

        passwordInput.addEventListener('input', function () {
            const password = this.value;
            checkPasswordStrength(password, strengthBar, feedback, requirements);
            checkPasswordMatch();
        });

        confirmInput.addEventListener('input', checkPasswordMatch);

        function checkPasswordMatch() {
            const password = passwordInput.value;
            const confirm = confirmInput.value;
            const mismatchFeedback = document.getElementById('passwordMismatch');

            if (confirm && password !== confirm) {
                confirmInput.classList.add('is-invalid');
                mismatchFeedback.style.display = 'block';
            } else if (confirm) {
                confirmInput.classList.remove('is-invalid');
                confirmInput.classList.add('is-valid');
                mismatchFeedback.style.display = 'none';
            }
        }
    }

    // Check password strength
    function checkPasswordStrength(password, strengthBar, feedback, requirements) {
        let score = 0;
        const checks = {
            length: password.length >= 6,
            uppercase: /[A-Z]/.test(password),
            lowercase: /[a-z]/.test(password),
            number: /[0-9]/.test(password)
        };

        // Update requirements UI
        Object.keys(checks).forEach(key => {
            const req = requirements[key];
            const met = checks[key];

            if (met) {
                req.classList.add('met');
                req.querySelector('i').className = 'fas fa-check text-success me-2';
                score++;
            } else {
                req.classList.remove('met');
                req.querySelector('i').className = 'fas fa-times text-danger me-2';
            }
        });

        // Update strength bar
        const strengthClasses = ['weak', 'fair', 'good', 'strong'];
        const strengthTexts = ['Yếu', 'Trung bình', 'Tốt', 'Mạnh'];
        const strengthColors = ['danger', 'warning', 'info', 'success'];

        strengthBar.className = 'progress-bar';

        if (password.length > 0) {
            const strengthLevel = Math.min(score, 4) - 1;
            strengthBar.classList.add(strengthClasses[strengthLevel]);
            strengthBar.style.width = `${(score / 4) * 100}%`;
            feedback.textContent = `Độ mạnh: ${strengthTexts[strengthLevel]}`;
            feedback.className = `form-text text-${strengthColors[strengthLevel]}`;
        } else {
            strengthBar.style.width = '0%';
            feedback.textContent = '';
        }
    }

    // Toast notification function
    function showToast(message, type = 'info') {
        let toastContainer = document.getElementById('toast-container');
        if (!toastContainer) {
            toastContainer = document.createElement('div');
            toastContainer.id = 'toast-container';
            toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
            toastContainer.style.zIndex = '9999';
            document.body.appendChild(toastContainer);
        }

        const toastId = 'toast-' + Date.now();
        const iconClass = type === 'success' ? 'fa-check-circle text-success' :
            type === 'error' ? 'fa-exclamation-circle text-danger' :
                'fa-info-circle text-info';

        const toastHtml = `
        <div class="toast" id="${toastId}" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <i class="fas ${iconClass} me-2"></i>
                <strong class="me-auto">Thông báo</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
            </div>
            <div class="toast-body">${message}</div>
        </div>
    `;

        toastContainer.insertAdjacentHTML('beforeend', toastHtml);

        const toastElement = document.getElementById(toastId);
        const toast = new bootstrap.Toast(toastElement);
        toast.show();

        toastElement.addEventListener('hidden.bs.toast', function () {
            this.remove();
        });
    }
</script>