@{
    ViewBag.Title = "CuaHang";
    Layout = "~/Views/Shared/_LayoutHome.cshtml";
}

<!-- Breadcrumb Section -->
<section class="breadcrumb-section position-relative overflow-hidden">
    <div class="breadcrumb-bg"></div>
    <div class="breadcrumb-overlay"></div>
    <div class="container position-relative">
        <div class="row">
            <div class="col-12">
                <div class="breadcrumb-content text-white text-center">
                    <h1 class="display-4 fw-bold mb-3 animate__animated animate__fadeInUp">Cửa hàng</h1>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb justify-content-center mb-0 animate__animated animate__fadeInUp animate__delay-1s">
                            <li class="breadcrumb-item">
                                <a href="@Url.Action("Index","Home")" class="text-white-50 text-decoration-none">
                                    <i class="fas fa-home me-1"></i>Trang chủ
                                </a>
                            </li>
                            <li class="breadcrumb-item active text-white" aria-current="page">
                                Cửa hàng
                            </li>
                        </ol>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Shop Content Section -->
<section class="shop-section py-5">
    <div class="container-fluid">
        <!-- Shop Toolbar -->
        <div class="row mb-5">
            <div class="col-12">
                <div class="shop-toolbar card border-0 shadow-sm">
                    <div class="card-body p-4">
                        <!-- Basic Search Form -->
                        <div class="basic-search mb-3">
                            <form action="@Url.Action("CuaHang", ViewBag.DanhMuc)" method="get" class="row align-items-center">
                                <div class="col-lg-8 col-md-7 mb-3 mb-md-0">
                                    <div class="input-group input-group-lg">
                                        <span class="input-group-text bg-primary text-white">
                                            <i class="fas fa-search"></i>
                                        </span>
                                        <input type="text" name="search" class="form-control"
                                               placeholder="Tìm kiếm theo tên sản phẩm..."
                                               value="@ViewBag.Search">
                                    </div>
                                </div>
                                <div class="col-lg-4 col-md-5">
                                    <div class="d-flex gap-2">
                                        <button type="submit" class="btn btn-primary btn-lg flex-grow-1">
                                            <i class="fas fa-search me-2"></i>Tìm kiếm
                                        </button>
                                        <button type="button" class="btn btn-outline-secondary btn-lg" id="btnAdvancedSearch">
                                            <i class="fas fa-sliders-h"></i>
                                        </button>
                                    </div>
                                </div>
                            </form>
                        </div>

                        <!-- Advanced Search Panel -->
                        <div id="advancedSearchPanel" class="advanced-search-panel" style="display: none;">
                            <div class="card bg-light border-0 mt-4">
                                <div class="card-header bg-primary text-white">
                                    <h6 class="mb-0">
                                        <i class="fas fa-filter me-2"></i>Tìm kiếm nâng cao
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <form action="@Url.Action("CuaHang", ViewBag.DanhMuc)" method="get">
                                        <div class="row g-3">
                                            <!-- Price Range -->
                                            <div class="col-md-4">
                                                <label class="form-label fw-bold">
                                                    <i class="fas fa-dollar-sign text-success me-2"></i>Giá từ:
                                                </label>
                                                <div class="input-group">
                                                    <input type="number" name="minPrice" class="form-control"
                                                           placeholder="0" value="@ViewBag.MinPrice" min="0">
                                                    <span class="input-group-text">₫</span>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <label class="form-label fw-bold">
                                                    <i class="fas fa-dollar-sign text-success me-2"></i>Đến:
                                                </label>
                                                <div class="input-group">
                                                    <input type="number" name="maxPrice" class="form-control"
                                                           placeholder="50,000,000" value="@ViewBag.MaxPrice" min="0">
                                                    <span class="input-group-text">₫</span>
                                                </div>
                                            </div>
                                            <!-- Brand Filter -->
                                            <div class="col-md-4">
                                                <label class="form-label fw-bold">
                                                    <i class="fas fa-tags text-info me-2"></i>Hãng sản phẩm:
                                                </label>
                                                <select name="brand" class="form-select">
                                                    <option value="">Tất cả hãng</option>
                                                    @if (ViewBag.Brands != null)
                                                    {
                                                        foreach (var brand in ViewBag.Brands)
                                                        {
                                                            <option value="@brand.MaHang" @(ViewBag.Brand == brand.MaHang.ToString() ? "selected" : "")>
                                                                @brand.TenHang
                                                            </option>
                                                        }
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                        <div class="row mt-4">
                                            <div class="col-12">
                                                <div class="d-flex gap-2">
                                                    <button type="submit" class="btn btn-primary">
                                                        <i class="fas fa-filter me-2"></i>Áp dụng bộ lọc
                                                    </button>
                                                    <a href="@Url.Action("CuaHang", ViewBag.DanhMuc)" class="btn btn-outline-secondary">
                                                        <i class="fas fa-undo me-2"></i>Xóa bộ lọc
                                                    </a>
                                                </div>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>

                        <!-- Results Info -->
                        <div class="results-info mt-3 d-flex justify-content-between align-items-center text-muted">
                            <div>
                                <span class="fw-bold text-primary">@ViewBag.TotalProducts</span> sản phẩm được tìm thấy
                            </div>
                            <div class="view-mode-buttons btn-group" role="group">
                                <input type="radio" class="btn-check" name="viewMode" id="gridView" checked>
                                <label class="btn btn-outline-primary" for="gridView" data-bs-toggle="tooltip" title="Xem dạng lưới">
                                    <i class="fas fa-th-large"></i>
                                </label>
                                <input type="radio" class="btn-check" name="viewMode" id="listView">
                                <label class="btn btn-outline-primary" for="listView" data-bs-toggle="tooltip" title="Xem dạng danh sách">
                                    <i class="fas fa-list"></i>
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Products Grid -->
        <div class="row" id="productsContainer">
            @foreach (var product in Model)
            {
                <div class="col-xl-3 col-lg-4 col-md-6 mb-4 product-item">
                    <div class="product-card card border-0 shadow-sm h-100 overflow-hidden">
                        <!-- Product Image -->
                        <div class="product-image-container position-relative">
                            <img src="~/assets/images/product/@product.MaSanPham/@product.HinhAnh"
                                 class="card-img-top product-image" alt="@product.TenSanPham">

                            <!-- Product Badges -->
                            <div class="product-badges position-absolute top-0 start-0 m-3">
                                <span class="badge bg-success rounded-pill">Mới</span>
                                @if (product.GiaMoi != null)
                                {
                                    <span class="badge bg-danger rounded-pill ms-1">
                                        Giảm @Math.Round(((product.Gia - product.GiaMoi) / product.Gia) * 100, 0)%
                                    </span>

                                }
                            </div>

                            <!-- Product Actions -->
                            <div class="product-overlay position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center">
                                <div class="product-actions d-flex gap-2">
                                    <a href="@Url.Action("ChiTietSanPham","Home",new {id=product.MaSanPham})"
                                       class="btn btn-light btn-lg rounded-circle action-btn"
                                       data-bs-toggle="tooltip" title="Xem chi tiết">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                    <button class="btn btn-primary btn-lg rounded-circle action-btn wishlist-btn"
                                            data-bs-toggle="tooltip" title="Yêu thích">
                                        <i class="far fa-heart"></i>
                                    </button>
                                    <button class="btn btn-success btn-lg rounded-circle action-btn add-to-cart-btn"
                                            data-product-id="@product.MaSanPham"
                                            data-bs-toggle="tooltip" title="Thêm vào giỏ">
                                        <i class="fas fa-shopping-cart"></i>
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Product Info -->
                        <div class="card-body p-4">
                            <h6 class="product-title mb-2">
                                <a href="@Url.Action("ChiTietSanPham","Home",new {id=product.MaSanPham})"
                                   class="text-decoration-none text-dark">
                                    @product.TenSanPham
                                </a>
                            </h6>

                            <!-- Product Rating -->
                            <div class="product-rating mb-3">
                                <div class="stars text-warning me-2">
                                    @{
                                        int saoDay = (int)Math.Floor(product.TrungBinhSao);
                                        int saoRong = 5 - saoDay;
                                    }

                                    @* Hiển thị sao đầy *@
                                    @for (int i = 0; i < saoDay; i++)
                                    {
                                        <i class="fas fa-star"></i>
                                    }
                                    @* Hiển thị sao rỗng *@
                                    @for (int i = 0; i < saoRong; i++)
                                    {
                                        <i class="far fa-star"></i>
                                    }
                                </div>
                                <small class="text-muted">
                                    @if (product.SoLuongDanhGia > 0)
                                    {
                                        <span>(@product.TrungBinhSao.ToString("0.0")) - @product.SoLuongDanhGia đánh giá</span>
                                    }
                                    else
                                    {
                                        <span>Chưa có đánh giá</span>
                                    }
                                </small>
                            </div>

                            <!-- Product Price -->
                            <div class="product-price mb-3">
                                @if (product.GiaMoi != null)
                                {
                                    <div class="price-wrapper">
                                        <span class="current-price h5 fw-bold text-danger me-2">@product.GiaMoi.ToString("N0")₫</span>
                                        <span class="original-price text-decoration-line-through text-muted">@product.Gia.ToString("N0")₫</span>
                                    </div>
                                }
                                else
                                {
                                    <span class="current-price h5 fw-bold text-primary">@product.Gia.ToString("N0")₫</span>
                                }
                            </div>

                            <!-- Quick Add Button -->
                            <div class="d-grid">
                                <button class="btn btn-outline-primary quick-add-btn" data-product-id="@product.MaSanPham">
                                    <i class="fas fa-plus me-2"></i>Thêm vào giỏ
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Empty State -->
        @if (Model == null || Model.Count == 0)
        {
            <div class="row">
                <div class="col-12">
                    <div class="empty-state text-center py-5">
                        <div class="empty-state-content">
                            <i class="fas fa-search fa-5x text-muted mb-4"></i>
                            <h3 class="fw-bold text-muted mb-3">Không tìm thấy sản phẩm nào</h3>
                            <p class="text-muted mb-4">Thử thay đổi từ khóa tìm kiếm hoặc bộ lọc của bạn</p>
                            <a href="@Url.Action("CuaHang", ViewBag.DanhMuc)" class="btn btn-primary">
                                <i class="fas fa-undo me-2"></i>Xem tất cả sản phẩm
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Pagination -->
        @if (Model != null && Model.Count > 0 && ViewBag.TotalPages > 1)
        {
            <div class="row mt-5">
                <div class="col-12">
                    <div class="pagination-wrapper d-flex justify-content-center">
                        <nav aria-label="Product pagination">
                            <ul class="pagination pagination-lg">
                                <!-- Previous Button -->
                                <li class="page-item @(ViewBag.CurrentPage == 1 ? "disabled" : "")">
                                    <a class="page-link"
                                       href="@(ViewBag.CurrentPage > 1 ? Url.Action("CuaHang", new { id = ViewBag.DanhMuc, page = ViewBag.CurrentPage - 1, search = ViewBag.Search, minPrice = ViewBag.MinPrice, maxPrice = ViewBag.MaxPrice, brand = ViewBag.Brand }) : "#")"
                                       aria-label="Previous">
                                        <i class="fas fa-chevron-left"></i>
                                    </a>
                                </li>

                                <!-- Page Numbers -->
                                @{
                                    int startPage = Math.Max(1, ViewBag.CurrentPage - 2);
                                    int endPage = Math.Min(ViewBag.TotalPages, ViewBag.CurrentPage + 2);
                                }

                                @if (startPage > 1)
                                {
                                    <li class="page-item">
                                        <a class="page-link" href="@Url.Action("CuaHang", new { id = ViewBag.DanhMuc, page = 1, search = ViewBag.Search, minPrice = ViewBag.MinPrice, maxPrice = ViewBag.MaxPrice, brand = ViewBag.Brand })">1</a>
                                    </li>
                                    if (startPage > 2)
                                    {
                                        <li class="page-item disabled">
                                            <span class="page-link">...</span>
                                        </li>
                                    }
                                }

                                @for (int i = startPage; i <= endPage; i++)
                                {
                                    <li class="page-item @(ViewBag.CurrentPage == i ? "active" : "")">
                                        <a class="page-link" href="@Url.Action("CuaHang", new { id = ViewBag.DanhMuc, page = i, search = ViewBag.Search, minPrice = ViewBag.MinPrice, maxPrice = ViewBag.MaxPrice, brand = ViewBag.Brand })">@i</a>
                                    </li>
                                }

                                @if (endPage < ViewBag.TotalPages)
                                {
                                    if (endPage < ViewBag.TotalPages - 1)
                                    {
                                        <li class="page-item disabled">
                                            <span class="page-link">...</span>
                                        </li>
                                    }
                                    <li class="page-item">
                                        <a class="page-link" href="@Url.Action("CuaHang", new { id = ViewBag.DanhMuc, page = ViewBag.TotalPages, search = ViewBag.Search, minPrice = ViewBag.MinPrice, maxPrice = ViewBag.MaxPrice, brand = ViewBag.Brand })">@ViewBag.TotalPages</a>
                                    </li>
                                }

                                <!-- Next Button -->
                                <li class="page-item @(ViewBag.CurrentPage == ViewBag.TotalPages ? "disabled" : "")">
                                    <a class="page-link"
                                       href="@(ViewBag.CurrentPage < ViewBag.TotalPages ? Url.Action("CuaHang", new { id = ViewBag.DanhMuc, page = ViewBag.CurrentPage + 1, search = ViewBag.Search, minPrice = ViewBag.MinPrice, maxPrice = ViewBag.MaxPrice, brand = ViewBag.Brand }) : "#")"
                                       aria-label="Next">
                                        <i class="fas fa-chevron-right"></i>
                                    </a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        }
    </div>
</section>

<style>
/* Shop Page Custom Styles */
:root {
    --primary-color: #0d6efd;
    --success-color: #198754;
    --danger-color: #dc3545;
    --warning-color: #ffc107;
    --info-color: #0dcaf0;
    --light-color: #f8f9fa;
    --dark-color: #212529;
    --transition: all 0.3s ease;
}

/* Breadcrumb Section */
.breadcrumb-section {
    min-height: 250px;
    display: flex;
    align-items: center;
}

.breadcrumb-bg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: url('@Url.Content("~/assets/images/banner/banner3.jpg")') center/cover no-repeat;
    z-index: -2;
}

.breadcrumb-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, rgba(13, 110, 253, 0.8), rgba(108, 117, 125, 0.4));
    z-index: -1;
}

/* Shop Section */
.shop-section {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    min-height: 100vh;
}

/* Shop Toolbar */
.shop-toolbar {
    border-radius: 15px !important;
    background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
}

.advanced-search-panel {
    animation: slideDown 0.3s ease-in-out;
}

keyframes slideDown {
    from {
        opacity: 0;
        transform: translateY(-20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.input-group-text {
    border: none;
}

.form-control:focus,
.form-select:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.15);
}

/* View Mode Buttons */
.view-mode-buttons .btn-check:checked + .btn {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
    color: white;
}

/* Product Cards */
.product-card {
    border-radius: 15px !important;
    transition: var(--transition);
    overflow: hidden;
}

.product-card:hover {
    transform: translateY(-10px);
    box-shadow: 0 20px 40px rgba(0,0,0,0.15) !important;
}

.product-image-container {
    height: 280px;
    overflow: hidden;
    background: var(--light-color);
}

.product-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: var(--transition);
}

.product-card:hover .product-image {
    transform: scale(1.1);
}

.product-badges {
    z-index: 5;
}

.product-badges .badge {
    font-size: 0.75rem;
    padding: 0.5rem 0.75rem;
}

/* Product Overlay */
.product-overlay {
    background: rgba(0,0,0,0.7);
    opacity: 0;
    transition: var(--transition);
    backdrop-filter: blur(2px);
}

.product-card:hover .product-overlay {
    opacity: 1;
}

.action-btn {
    width: 50px;
    height: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: var(--transition);
    border: 2px solid white;
}

.action-btn:hover {
    transform: scale(1.1);
}

/* Product Info */
.product-title a {
    transition: var(--transition);
}

.product-title a:hover {
    color: var(--primary-color) !important;
}

.stars i {
    font-size: 0.9rem;
}

.price-wrapper {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.quick-add-btn {
    transition: var(--transition);
    font-weight: 500;
}

.quick-add-btn:hover {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
    color: white;
    transform: translateY(-2px);
}

/* List View Styles */
.list-view .product-item {
    flex: 0 0 100%;
    max-width: 100%;
}

.list-view .product-card {
    flex-direction: row;
}

.list-view .product-image-container {
    width: 300px;
    height: 200px;
    flex-shrink: 0;
}

.list-view .card-body {
    display: flex;
    flex-direction: column;
    justify-content: center;
}

/* Empty State */
.empty-state {
    min-height: 50vh;
    display: flex;
    align-items: center;
    justify-content: center;
}

/* Pagination */
.pagination-lg .page-link {
    border-radius: 10px;
    margin: 0 3px;
    border: 2px solid transparent;
    transition: var(--transition);
}

.pagination-lg .page-item.active .page-link {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
    transform: scale(1.1);
}

.pagination-lg .page-link:hover {
    border-color: var(--primary-color);
    transform: translateY(-2px);
}

/* Wishlist Animation */
.wishlist-btn.active {
    background-color: var(--danger-color) !important;
    border-color: var(--danger-color) !important;
}

.wishlist-btn.active i {
    animation: heartBeat 1s ease-in-out;
}

keyframes heartBeat {
    0% { transform: scale(1); }
    25% { transform: scale(1.3); }
    50% { transform: scale(1); }
    75% { transform: scale(1.3); }
    100% { transform: scale(1); }
}

/* Loading States */
.loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(255,255,255,0.8);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
}

.loading-spinner {
    width: 3rem;
    height: 3rem;
    border: 0.25rem solid #f3f3f3;
    border-top: 0.25rem solid var(--primary-color);
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Responsive Design */
media (max-width: 992px) {
    .product-image-container {
        height: 250px;
    }

    .action-btn {
        width: 45px;
        height: 45px;
    }

    .list-view .product-image-container {
        width: 250px;
        height: 180px;
    }
}

media (max-width: 768px) {
    .breadcrumb-section {
        min-height: 180px;
    }

    .product-actions {
        position: static !important;
        opacity: 1 !important;
        background: none !important;
        backdrop-filter: none !important;
        justify-content: space-around;
        padding: 1rem;
    }

    .product-overlay {
        opacity: 1 !important;
        background: linear-gradient(to top, rgba(0,0,0,0.8), transparent) !important;
        align-items: flex-end !important;
    }

    .action-btn {
        width: 40px;
        height: 40px;
        font-size: 0.9rem;
    }

    .list-view .product-card {
        flex-direction: column;
    }

    .list-view .product-image-container {
        width: 100%;
        height: 250px;
    }

    .pagination-lg {
        font-size: 1rem;
    }

    .pagination-lg .page-link {
        padding: 0.5rem 0.75rem;
    }
}

media (max-width: 576px) {
    .breadcrumb-content h1 {
        font-size: 2rem;
    }

    .shop-toolbar .card-body {
        padding: 1.5rem !important;
    }

    .basic-search .row {
        flex-direction: column;
    }

    .results-info {
        flex-direction: column;
        text-align: center;
        gap: 1rem;
    }

    .product-image-container {
        height: 200px;
    }

    .empty-state i {
        font-size: 3rem !important;
    }
}

/* Animations */
keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.animate__animated {
    animation-duration: 1s;
    animation-fill-mode: both;
}

.animate__fadeInUp {
    animation-name: fadeInUp;
}

.animate__delay-1s {
    animation-delay: 1s;
}

/* Scroll to top on page change */
.page-transition {
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.5s ease;
}

.page-transition.loaded {
    opacity: 1;
    transform: translateY(0);
}
</style>

<script type="text/javascript">
    window.APP_CONFIG = {
        addToCartUrl: '@Url.Action("AddToCartJson", "Home")',
        cuaHangUrl: '@Url.Action("CuaHang", "Home")',
        danhMuc: '@ViewBag.DanhMuc'
    };
</script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Kiểm tra config đã load chưa
        if (!window.APP_CONFIG) {
            console.error('APP_CONFIG not found');
            return;
        }

        console.log('JavaScript loaded successfully');

        // Advanced search panel toggle
        const btnAdvancedSearch = document.getElementById('btnAdvancedSearch');
        const advancedSearchPanel = document.getElementById('advancedSearchPanel');

        if (btnAdvancedSearch && advancedSearchPanel) {
            btnAdvancedSearch.addEventListener('click', function () {
                if (advancedSearchPanel.style.display === 'none' || !advancedSearchPanel.style.display) {
                    advancedSearchPanel.style.display = 'block';
                    this.classList.add('active');
                } else {
                    advancedSearchPanel.style.display = 'none';
                    this.classList.remove('active');
                }
            });
        }

        // View mode toggle
        const gridView = document.getElementById('gridView');
        const listView = document.getElementById('listView');
        const productsContainer = document.getElementById('productsContainer');

        if (gridView && listView && productsContainer) {
            listView.addEventListener('change', function () {
                if (this.checked) {
                    productsContainer.classList.add('list-view');
                    localStorage.setItem('shop-view-mode', 'list');
                }
            });

            gridView.addEventListener('change', function () {
                if (this.checked) {
                    productsContainer.classList.remove('list-view');
                    localStorage.setItem('shop-view-mode', 'grid');
                }
            });

            // Load saved preference
            const savedViewMode = localStorage.getItem('shop-view-mode');
            if (savedViewMode === 'list') {
                listView.checked = true;
                productsContainer.classList.add('list-view');
            }
        }

        // Initialize tooltips nếu Bootstrap đã load
        if (typeof bootstrap !== 'undefined') {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            const tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        }

        // Wishlist functionality
        document.querySelectorAll('.wishlist-btn').forEach(btn => {
            btn.addEventListener('click', function () {
                const isActive = this.classList.contains('active');
                const icon = this.querySelector('i');

                if (isActive) {
                    this.classList.remove('active');
                    icon.classList.remove('fas');
                    icon.classList.add('far');
                    showToast('Đã xóa khỏi danh sách yêu thích', 'info');
                } else {
                    this.classList.add('active');
                    icon.classList.remove('far');
                    icon.classList.add('fas');
                    showToast('Đã thêm vào danh sách yêu thích', 'success');
                }
            });
        });

        // Add to cart functionality - SỬA CHÍNH TẠI ĐÂY
        document.querySelectorAll('.add-to-cart-btn, .quick-add-btn').forEach(btn => {
            console.log('Registering event for button:', btn); // Debug log

            btn.addEventListener('click', function (e) {
                e.preventDefault();
                e.stopPropagation();

                console.log('Button clicked:', this); // Debug log

                const productId = this.getAttribute('data-product-id');
                const originalText = this.innerHTML;

                console.log('Product ID:', productId); // Debug log

                if (!productId) {
                    showToast('Không tìm thấy ID sản phẩm!', 'error');
                    return;
                }

                // Add loading state
                this.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Đang thêm...';
                this.disabled = true;

                // Tạo FormData
                const formData = new FormData();
                formData.append('productId', productId);
                formData.append('quantity', '1');

                console.log('Sending request to:', window.APP_CONFIG.addToCartUrl); // Debug log

                // Gửi AJAX request
                fetch(window.APP_CONFIG.addToCartUrl, {
                    method: 'POST',
                    body: formData
                })
                    .then(response => {
                        console.log('Response status:', response.status);
                        console.log('Response headers:', response.headers);

                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }

                        // Kiểm tra content type
                        const contentType = response.headers.get('content-type');
                        if (!contentType || !contentType.includes('application/json')) {
                            throw new Error('Response is not JSON');
                        }

                        return response.json();
                    })
                    .then(data => {
                        console.log('Response data:', data);

                        if (data.success) {
                            // Success state
                            this.innerHTML = '<i class="fas fa-check me-2"></i>Đã thêm';
                            this.classList.add('btn-success');
                            showToast('Sản phẩm đã được thêm vào giỏ hàng!', 'success');
                            updateCartCount(data.cartItemCount || 1);
                        } else {
                            showToast(data.message || 'Có lỗi xảy ra!', 'error');
                        }

                        // Reset after 2 seconds
                        setTimeout(() => {
                            this.innerHTML = originalText;
                            this.disabled = false;
                            this.classList.remove('btn-success');
                        }, 2000);
                    })
                    .catch(error => {
                        console.error('Fetch error:', error);
                        showToast('Có lỗi xảy ra: ' + error.message, 'error');

                        // Reset button
                        this.innerHTML = originalText;
                        this.disabled = false;
                    });
            });
        });

        // Initialize animations
        const animateOnScroll = () => {
            const products = document.querySelectorAll('.product-item');
            products.forEach((product, index) => {
                const productTop = product.getBoundingClientRect().top;
                const productVisible = 150;

                if (productTop < window.innerHeight - productVisible) {
                    setTimeout(() => {
                        product.style.opacity = '1';
                        product.style.transform = 'translateY(0)';
                    }, index * 100);
                }
            });
        };

        // Initialize product animation
        document.querySelectorAll('.product-item').forEach(product => {
            product.style.opacity = '0';
            product.style.transform = 'translateY(20px)';
            product.style.transition = 'all 0.6s ease';
        });

        window.addEventListener('scroll', animateOnScroll);
        animateOnScroll();

        console.log('All event listeners registered successfully');
    });

    // Function to update cart count in header
    function updateCartCount(count) {
        console.log('Updating cart count to:', count);

        const cartBadge = document.querySelector('.cart-badge');
        const cartCount = document.querySelector('.cart-count');
        const cartNumber = document.querySelector('.cart-number');

        if (cartBadge) {
            cartBadge.textContent = count;
            cartBadge.style.display = count > 0 ? 'inline' : 'none';
        }

        if (cartCount) {
            cartCount.textContent = count;
        }

        if (cartNumber) {
            cartNumber.textContent = count;
        }
    }

    // Toast function
    function showToast(message, type = 'success') {
        console.log('Showing toast:', message, type);

        let toastContainer = document.getElementById('toast-container');
        if (!toastContainer) {
            toastContainer = document.createElement('div');
            toastContainer.id = 'toast-container';
            toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
            toastContainer.style.zIndex = '9999';
            document.body.appendChild(toastContainer);
        }

        const toastId = 'toast-' + Date.now();
        const iconClass = type === 'success' ? 'fa-check-circle text-success' :
            type === 'error' ? 'fa-exclamation-circle text-danger' :
                'fa-info-circle text-info';

        const toastHtml = `
        <div class="toast" id="${toastId}" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="4000">
            <div class="toast-header">
                <i class="fas ${iconClass} me-2"></i>
                <strong class="me-auto">Thông báo</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
            </div>
            <div class="toast-body">${message}</div>
        </div>
    `;

        toastContainer.insertAdjacentHTML('beforeend', toastHtml);

        const toastElement = document.getElementById(toastId);

        // Kiểm tra Bootstrap có sẵn không
        if (typeof bootstrap !== 'undefined' && bootstrap.Toast) {
            const toast = new bootstrap.Toast(toastElement);
            toast.show();

            toastElement.addEventListener('hidden.bs.toast', function () {
                this.remove();
            });
        } else {
            // Fallback nếu không có Bootstrap
            toastElement.style.display = 'block';
            setTimeout(() => {
                toastElement.remove();
            }, 4000);
        }
    }
    function generateStarsHTML(rating, reviewCount = 0) {
        const fullStars = Math.floor(rating);
        const hasHalfStar = (rating - fullStars) >= 0.5;
        const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);

        let starsHTML = '';

        // Full stars
        for (let i = 0; i < fullStars; i++) {
            starsHTML += '<i class="fas fa-star"></i>';
        }

        // Half star
        if (hasHalfStar) {
            starsHTML += '<i class="fas fa-star-half-alt"></i>';
        }

        // Empty stars
        for (let i = 0; i < emptyStars; i++) {
            starsHTML += '<i class="far fa-star"></i>';
        }

        return `
        <div class="stars text-warning me-2">
            ${starsHTML}
        </div>
        <small class="text-muted">
            ${reviewCount > 0 ? `(${rating.toFixed(1)}) - ${reviewCount} đánh giá` : 'Chưa có đánh giá'}
        </small>
    `;
    }

    // Function để cập nhật rating sau khi load AJAX (nếu cần)
    function updateProductRatings() {
        document.querySelectorAll('.product-rating[data-rating]').forEach(ratingElement => {
            const rating = parseFloat(ratingElement.getAttribute('data-rating'));
            const reviewCount = parseInt(ratingElement.getAttribute('data-review-count')) || 0;

            ratingElement.innerHTML = generateStarsHTML(rating, reviewCount);
        });
    }

    // Animation cho stars khi hover
    document.addEventListener('DOMContentLoaded', function () {
        // Thêm hover effect cho stars
        const starContainers = document.querySelectorAll('.stars');

        starContainers.forEach(container => {
            const stars = container.querySelectorAll('i');

            stars.forEach((star, index) => {
                star.addEventListener('mouseenter', function () {
                    // Highlight stars up to hovered star
                    for (let i = 0; i <= index; i++) {
                        stars[i].style.transform = 'scale(1.1)';
                        stars[i].style.transition = 'transform 0.2s ease';
                    }
                });

                star.addEventListener('mouseleave', function () {
                    // Reset all stars
                    stars.forEach(s => {
                        s.style.transform = 'scale(1)';
                    });
                });
            });
        });
    });

    // CSS cho star animations
    const starStyles = `
    .stars i {
        transition: all 0.3s ease;
        margin-right: 2px;
    }

    .stars i:hover {
        transform: scale(1.1);
        text-shadow: 0 0 10px rgba(255, 193, 7, 0.8);
    }

    .product-rating {
        align-items: center;
        display: flex;
    }

    .stars {
        white-space: nowrap;
    }
`;

    // Inject styles
    if (!document.getElementById('star-styles')) {
        const styleSheet = document.createElement('style');
        styleSheet.id = 'star-styles';
        styleSheet.textContent = starStyles;
        document.head.appendChild(styleSheet);
    }
</script>