@{
    ViewBag.Title = "ChiTietSanPham";
    Layout = "~/Views/Shared/_LayoutHome.cshtml";
}
@{
    // Đường dẫn đến thư mục chứa hình ảnh của sản phẩm
    var imagePath = Server.MapPath($"~/assets/images/product/{Model.MaSanPham}");
    var imageFiles = new List<string>();

    // Nếu thư mục tồn tại, lấy tất cả các file hình ảnh (jpg, png, gif)
    if (Directory.Exists(imagePath))
    {
        var files = Directory.GetFiles(imagePath, "*.*", SearchOption.TopDirectoryOnly)
            .Where(file => file.EndsWith(".jpg") || file.EndsWith(".png") || file.EndsWith(".gif")).ToList();

        imageFiles.AddRange(files);
    }
}

<!-- Breadcrumb Section -->
<section class="breadcrumb-section position-relative overflow-hidden">
    <div class="breadcrumb-bg"></div>
    <div class="breadcrumb-overlay"></div>
    <div class="container position-relative">
        <div class="row">
            <div class="col-12">
                <div class="breadcrumb-content text-white">
                    <h2 class="h3 fw-bold mb-3">Chi tiết sản phẩm</h2>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb mb-0">
                            <li class="breadcrumb-item">
                                <a href="@Url.Action("Index","Home")" class="text-white-50 text-decoration-none">
                                    <i class="fas fa-home me-1"></i>Trang chủ
                                </a>
                            </li>
                            <li class="breadcrumb-item active text-white" aria-current="page">
                                Chi tiết sản phẩm
                            </li>
                        </ol>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</section>

@if (TempData["Message"] != null)
{
    <div class="alert alert-success alert-dismissible fade show position-fixed top-0 start-50 translate-middle-x mt-3"
         style="z-index: 9999; max-width: 500px;" role="alert">
        <i class="fas fa-check-circle me-2"></i>
        @Html.Raw(TempData["Message"])
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- Product Detail Section -->
<section class="product-detail-section py-5">
    <div class="container-fluid">
        <div class="row g-5">
            <!-- Product Images -->
            <div class="col-lg-5">
                <div class="product-gallery">
                    <!-- Main Image -->
                    <div class="main-image-container mb-4">
                        <div class="main-image-wrapper position-relative overflow-hidden rounded-4">
                            <img id="mainImage"
                                 src="@Url.Content("~/assets/images/product/"+Model.MaSanPham + "/" + Model.HinhAnh)"
                                 alt="@Model.TenSanPham"
                                 class="img-fluid main-product-image">
                            <div class="image-zoom-overlay position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center">
                                <button class="btn btn-light btn-lg rounded-circle zoom-btn" data-bs-toggle="modal" data-bs-target="#imageModal">
                                    <i class="fas fa-search-plus"></i>
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Thumbnail Images -->
                    @if (imageFiles.Any())
                    {
                        <div class="thumbnail-container">
                            <div class="row g-2">
                                @foreach (var file in imageFiles.Take(4))
                                {
                                    <div class="col-3">
                                        <div class="thumbnail-wrapper">
                                            <img src="@Url.Content($"~/assets/images/product/{Model.MaSanPham}/" + Path.GetFileName(file))"
                                                 alt="@Model.TenSanPham"
                                                 class="img-fluid thumbnail-image rounded-3"
                                                 data-image="@Url.Content($"~/assets/images/product/{Model.MaSanPham}/" + Path.GetFileName(file))"
                                                 role="button">
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Product Information -->
            <div class="col-lg-7">
                <div class="product-info">
                    <!-- Product Title -->
                    <h1 class="product-title h2 fw-bold text-dark mb-3">@Model.TenSanPham</h1>

                    <!-- Product Rating -->
                    @if (ViewBag.AverageRating != null && ViewBag.TotalReviews != null)
                    {
                        <div class="product-rating d-flex align-items-center mb-4">
                            <div class="rating-stars me-3">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <i class="fas fa-star @(i <= ViewBag.AverageRating ? "text-warning" : "text-muted")"></i>
                                }
                            </div>
                            <span class="rating-text text-muted">
                                (@ViewBag.AverageRating/5.0 - @ViewBag.TotalReviews đánh giá)
                            </span>
                        </div>
                    }

                    <!-- Product Price -->
                    <div class="product-price mb-4">
                        @if (Model.GiaMoi != null)
                        {
                            <div class="price-wrapper">
                                <span class="current-price h3 fw-bold text-danger me-3">@Model.GiaMoi.ToString("N0")₫</span>
                                <span class="original-price h5 text-decoration-line-through text-muted">@Model.Gia.ToString("N0")₫</span>
                                <span class="discount-badge badge bg-danger ms-2">
                                    -@Math.Round(((Model.Gia - Model.GiaMoi) / (decimal)Model.Gia) * 100, 0)%
                                </span>
                            </div>
                        }
                        else
                        {
                            <span class="current-price h3 fw-bold text-primary">@Model.Gia.ToString("N0")₫</span>
                        }
                    </div>

                    <!-- Product Description -->
                    <div class="product-description mb-4">
                        <h5 class="fw-bold text-dark mb-3">Mô tả sản phẩm</h5>
                        <div class="description-content">
                            @Html.Raw(Model.MoTa)
                        </div>
                    </div>

                    <!-- Stock Information -->
                    <div class="stock-info mb-4">
                        <div class="row align-items-center">
                            <div class="col-auto">
                                <span class="fw-bold text-dark">Tình trạng:</span>
                            </div>
                            <div class="col-auto">
                                @if (Model.SoLuong > 0)
                                {
                                    <span class="badge bg-success fs-6">
                                        <i class="fas fa-check-circle me-1"></i>
                                        Còn @Model.SoLuong sản phẩm
                                    </span>
                                }
                                else
                                {
                                    <span class="badge bg-danger fs-6">
                                        <i class="fas fa-times-circle me-1"></i>
                                        Hết hàng
                                    </span>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Add to Cart Form -->
                    <form action="@Url.Action("AddToCart", "Home")" method="post" class="add-to-cart-form">
                        <input type="hidden" name="productId" value="@Model.MaSanPham" />

                        <!-- Quantity Selector -->
                        <div class="quantity-section mb-4">
                            <label class="form-label fw-bold text-dark mb-3">Số lượng:</label>
                            <div class="quantity-wrapper d-flex align-items-center">
                                <div class="input-group quantity-input" style="width: 150px;">
                                    <button class="btn btn-outline-secondary quantity-btn" type="button" data-action="decrease">
                                        <i class="fas fa-minus"></i>
                                    </button>
                                    <input type="number" class="form-control text-center quantity-value" name="quantity" value="1" min="1" max="@Model.SoLuong">
                                    <button class="btn btn-outline-secondary quantity-btn" type="button" data-action="increase">
                                        <i class="fas fa-plus"></i>
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="action-buttons">
                            <div class="row g-3">
                                <div class="col-md-8">
                                    @if (Model.SoLuong > 0)
                                    {
                                        <button type="submit" class="btn btn-primary btn-lg w-100 add-to-cart-btn">
                                            <i class="fas fa-shopping-cart me-2"></i>
                                            <span class="btn-text">Thêm vào giỏ hàng</span>
                                            <span class="spinner-border spinner-border-sm d-none" role="status">
                                                <span class="visually-hidden">Loading...</span>
                                            </span>
                                        </button>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-secondary btn-lg w-100" disabled>
                                            <i class="fas fa-times-circle me-2"></i>
                                            Hết hàng
                                        </button>
                                    }
                                </div>
                                <div class="col-md-4">
                                    <button type="button" class="btn btn-outline-danger btn-lg w-100 wishlist-btn">
                                        <i class="fas fa-heart"></i>
                                        <span class="d-none d-lg-inline ms-2">Yêu thích</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </form>

                    <!-- Product Features -->
                    <div class="product-features mt-5">
                        <div class="row g-4">
                            <div class="col-md-6">
                                <div class="feature-item d-flex align-items-center">
                                    <div class="feature-icon bg-primary text-white rounded-circle me-3">
                                        <i class="fas fa-shield-alt"></i>
                                    </div>
                                    <div>
                                        <h6 class="mb-1">Bảo hành chính hãng</h6>
                                        <small class="text-muted">12 tháng</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="feature-item d-flex align-items-center">
                                    <div class="feature-icon bg-success text-white rounded-circle me-3">
                                        <i class="fas fa-shipping-fast"></i>
                                    </div>
                                    <div>
                                        <h6 class="mb-1">Miễn phí vận chuyển</h6>
                                        <small class="text-muted">Toàn quốc</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Reviews Section -->
<section class="reviews-section py-5 bg-light">
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <h3 class="section-title fw-bold text-dark mb-5">
                    <i class="fas fa-star text-warning me-2"></i>
                    Đánh giá sản phẩm
                </h3>

                @if (ViewBag.Reviews != null && ViewBag.TotalReviews > 0)
                {
                    <!-- Rating Summary -->
                    <div class="rating-summary-card card border-0 shadow-sm mb-5">
                        <div class="card-body p-4">
                            <div class="row align-items-center">
                                <div class="col-lg-4 text-center">
                                    <div class="overall-rating">
                                        <h2 class="display-3 fw-bold text-warning mb-2">@ViewBag.AverageRating</h2>
                                        <div class="rating-stars mb-2">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                <i class="fas fa-star fa-lg @(i <= ViewBag.AverageRating ? "text-warning" : "text-muted")"></i>
                                            }
                                        </div>
                                        <p class="text-muted fw-bold">@ViewBag.TotalReviews đánh giá</p>
                                    </div>
                                </div>
                                <div class="col-lg-8">
                                    <div class="rating-breakdown">
                                        @if (ViewBag.RatingDistribution != null)
                                        {
                                            for (int star = 5; star >= 1; star--)
                                            {
                                                int count = 0;
                                                foreach (var dist in ViewBag.RatingDistribution)
                                                {
                                                    if ((int)dist.Stars == star)
                                                    {
                                                        count = (int)dist.Count;
                                                        break;
                                                    }
                                                }
                                                var percentage = ViewBag.TotalReviews > 0 ? (count * 100.0 / ViewBag.TotalReviews) : 0;

                                                <div class="rating-bar d-flex align-items-center mb-3">
                                                    <div class="star-label me-3" style="width: 80px;">
                                                        <span class="fw-bold">@star</span>
                                                        <i class="fas fa-star text-warning ms-1"></i>
                                                    </div>
                                                    <div class="progress flex-grow-1 me-3" style="height: 12px;">
                                                        <div class="progress-bar bg-warning" role="progressbar"
                                                             style="width: @percentage%" aria-valuenow="@percentage"
                                                             aria-valuemin="0" aria-valuemax="100"></div>
                                                    </div>
                                                    <div class="count-label text-muted fw-bold" style="width: 40px;">@count</div>
                                                </div>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Reviews List -->
                    <div class="reviews-list">
                        <div class="row">
                            @foreach (var review in ViewBag.Reviews)
                            {
                                <div class="col-lg-6 mb-4">
                                    <div class="review-card card border-0 shadow-sm h-100">
                                        <div class="card-body p-4">
                                            <div class="review-header d-flex justify-content-between align-items-start mb-3">
                                                <div class="reviewer-info">
                                                    <h6 class="reviewer-name fw-bold mb-1">@review.HoTen</h6>
                                                    <small class="review-date text-muted">@review.NgayDanhGia</small>
                                                </div>
                                                <div class="review-rating">
                                                    @for (int i = 1; i <= 5; i++)
                                                    {
                                                        <i class="fas fa-star @(i <= (int)review.DiemDanhGia ? "text-warning" : "text-muted")"></i>
                                                    }
                                                </div>
                                            </div>
                                            <div class="review-content">
                                                <p class="review-comment mb-0">@review.BinhLuan</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Review Pagination -->
                    if (ViewBag.ReviewTotalPages > 1)
                    {
                        <div class="review-pagination mt-5">
                            <nav aria-label="Review pagination">
                                <ul class="pagination justify-content-center">
                                    @for (var i = 1; i <= ViewBag.ReviewTotalPages; i++)
                                    {
                                        <li class="page-item @(i == ViewBag.ReviewCurrentPage ? "active" : "")">
                                            <a class="page-link" href="@Url.Action("ChiTietSanPham", new { id = Model.MaSanPham, reviewPage = i })">@i</a>
                                        </li>
                                    }
                                </ul>
                            </nav>
                        </div>
                    }
                }
                else
                {
                    <div class="no-reviews-card card border-0 shadow-sm">
                        <div class="card-body text-center py-5">
                            <i class="fas fa-star fa-4x text-muted mb-4"></i>
                            <h5 class="fw-bold text-muted mb-3">Chưa có đánh giá nào</h5>
                            <p class="text-muted">Hãy là người đầu tiên đánh giá sản phẩm này sau khi mua hàng!</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</section>

<!-- Related Products Section -->
<section class="related-products-section py-5">
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-5">
                    <h3 class="section-title fw-bold text-dark mb-0">
                        <i class="fas fa-tags me-2"></i>
                        Sản phẩm cùng giá
                    </h3>

                    <!-- Slider Controls -->
                    <div class="slider-controls d-none d-md-flex">
                        <button class="btn btn-outline-primary me-2 slider-btn" id="prevBtn">
                            <i class="fas fa-chevron-left"></i>
                        </button>
                        <button class="btn btn-outline-primary slider-btn" id="nextBtn">
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    </div>
                </div>

                <!-- Products Slider Container -->
                <div class="slider-container position-relative">
                    <div class="slider-wrapper" id="productsSlider">
                        <div class="slider-track" id="sliderTrack">
                            @foreach (var sp in ViewBag.SanPhamCungGia)
                            {
                                <div class="slider-item">
                                    <div class="product-card card border-0 shadow-sm h-100 overflow-hidden">
                                        <div class="product-image position-relative">
                                            <img src="@Url.Content($"~/assets/images/product/{sp.MaSanPham}/{sp.HinhAnh}")"
                                                 alt="@sp.TenSanPham"
                                                 class="card-img-top product-img">

                                            <div class="product-badges position-absolute top-0 start-0 m-2">
                                                <span class="badge bg-success rounded-pill">Mới</span>
                                            </div>

                                            <div class="product-overlay position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center">
                                                <a href="@Url.Action("ChiTietSanPham", "Home", new { id = sp.MaSanPham })"
                                                   class="btn btn-light btn-lg rounded-pill">
                                                    <i class="fas fa-eye me-2"></i>
                                                    Xem chi tiết
                                                </a>
                                            </div>
                                        </div>

                                        <div class="card-body p-3">
                                            <h6 class="product-name mb-2">
                                                <a href="@Url.Action("ChiTietSanPham", "Home", new { id = sp.MaSanPham })"
                                                   class="text-decoration-none text-dark">
                                                    @sp.TenSanPham
                                                </a>
                                            </h6>

                                            <div class="product-price">
                                                <span class="h6 fw-bold text-primary">@sp.Gia.ToString("N0")₫</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Mobile Slider Controls -->
                    <div class="mobile-slider-controls d-flex d-md-none justify-content-center mt-4">
                        <button class="btn btn-outline-primary me-2" id="prevBtnMobile">
                            <i class="fas fa-chevron-left"></i>
                        </button>
                        <button class="btn btn-outline-primary" id="nextBtnMobile">
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    </div>

                    <!-- Slider Indicators -->
                    <div class="slider-indicators d-flex justify-content-center mt-4">
                        <!-- Indicators will be generated by JavaScript -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Image Modal -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="imageModalLabel">@Model.TenSanPham</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center p-0">
                <img id="modalImage" src="" alt="@Model.TenSanPham" class="img-fluid">
            </div>
        </div>
    </div>
</div>

<style>
/* Product Detail Page Custom Styles */
:root {
    --primary-color: #0d6efd;
    --secondary-color: #6c757d;
    --success-color: #198754;
    --danger-color: #dc3545;
    --warning-color: #ffc107;
    --transition: all 0.3s ease;
}

/* Breadcrumb Section */
.breadcrumb-section {
    min-height: 200px;
    display: flex;
    align-items: center;
}

.breadcrumb-bg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: url('@Url.Content("~/assets/images/banner/banner3.jpg")') center/cover no-repeat;
    z-index: -2;
}

.breadcrumb-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, rgba(13, 110, 253, 0.8), rgba(220, 53, 69, 0.4));
    z-index: -1;
}

/* Product Gallery */
.product-gallery {
    position: sticky;
    top: 100px;
}

.main-image-container {
    height: 500px;
}

.main-image-wrapper {
    height: 100%;
    background: #f8f9fa;
}

.main-product-image {
    width: 100%;
    height: 100%;
    object-fit: contain;
    transition: var(--transition);
}

.image-zoom-overlay {
    background: rgba(0,0,0,0.5);
    opacity: 0;
    transition: var(--transition);
}

.main-image-wrapper:hover .image-zoom-overlay {
    opacity: 1;
}

.thumbnail-wrapper {
    height: 100px;
    overflow: hidden;
    border-radius: 12px;
    cursor: pointer;
    border: 2px solid transparent;
    transition: var(--transition);
}

.thumbnail-wrapper:hover {
    border-color: var(--primary-color);
}

.thumbnail-wrapper.active {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px rgba(13, 110, 253, 0.25);
}

.thumbnail-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: var(--transition);
}

.thumbnail-wrapper:hover .thumbnail-image {
    transform: scale(1.1);
}

/* Product Info */
.product-info {
    padding: 2rem 0;
}

.rating-stars i {
    font-size: 1.2rem;
}

.price-wrapper {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    gap: 1rem;
}

.description-content {
    max-height: 200px;
    overflow-y: auto;
    padding: 1rem;
    background: #f8f9fa;
    border-radius: 8px;
    border-left: 4px solid var(--primary-color);
}

/* Quantity Selector */
.quantity-input {
    max-width: 150px;
}

.quantity-btn {
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 1px solid #dee2e6;
}

.quantity-value {
    border-left: none;
    border-right: none;
    text-align: center;
    font-weight: bold;
}

/* Action Buttons */
.add-to-cart-btn {
    transition: var(--transition);
    font-weight: 600;
    position: relative;
    overflow: hidden;
}

.add-to-cart-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(13, 110, 253, 0.3);
}

.add-to-cart-btn.loading .btn-text {
    opacity: 0;
}

.add-to-cart-btn.loading .spinner-border {
    display: inline-block !important;
}

.wishlist-btn {
    transition: var(--transition);
}

.wishlist-btn:hover {
    background-color: var(--danger-color);
    border-color: var(--danger-color);
    color: white;
    transform: translateY(-2px);
}

/* Feature Icons */
.feature-icon {
    width: 50px;
    height: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.25rem;
}

/* Reviews Section */
.rating-summary-card {
    border-radius: 15px !important;
}

.review-card {
    border-radius: 12px !important;
    transition: var(--transition);
}

.review-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 30px rgba(0,0,0,0.15) !important;
}

.no-reviews-card {
    border-radius: 15px !important;
}

/* Slider Styles */
.slider-container {
    overflow: hidden;
}

.slider-wrapper {
    position: relative;
}

.slider-track {
    display: flex;
    transition: transform 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    will-change: transform;
}

.slider-item {
    flex: 0 0 auto;
    width: 300px;
    margin-right: 20px;
}

.slider-btn {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.2rem;
    transition: var(--transition);
    border: 2px solid var(--primary-color);
}

.slider-btn:hover {
    background-color: var(--primary-color);
    color: white;
    transform: scale(1.1);
}

.slider-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
}

.slider-indicators {
    gap: 8px;
}

.slider-indicator {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background-color: #dee2e6;
    border: none;
    cursor: pointer;
    transition: var(--transition);
}

.slider-indicator.active {
    background-color: var(--primary-color);
    transform: scale(1.2);
}

/* Related Products */
.product-card {
    border-radius: 15px !important;
    transition: var(--transition);
}

.product-card:hover {
    transform: translateY(-10px);
    box-shadow: 0 15px 35px rgba(0,0,0,0.15) !important;
}

.product-image {
    height: 250px;
    overflow: hidden;
}

.product-img {
    height: 100%;
    object-fit: cover;
    transition: var(--transition);
}

.product-card:hover .product-img {
    transform: scale(1.05);
}

.product-overlay {
    background: rgba(0,0,0,0.7);
    opacity: 0;
    transition: var(--transition);
}

.product-card:hover .product-overlay {
    opacity: 1;
}

/* Mobile Responsive Slider */
@@media (max-width: 768px) {
    .slider-item {
        width: 280px;
        margin-right: 15px;
    }

    .slider-btn {
        width: 40px;
        height: 40px;
        font-size: 1rem;
    }

    .product-image {
        height: 200px;
    }
}

@@media (max-width: 576px) {
    .slider-item {
        width: 250px;
        margin-right: 10px;
    }
}

/* Responsive Design */
@@media (max-width: 992px) {
    .product-gallery {
        position: static;
        margin-bottom: 3rem;
    }

    .main-image-container {
        height: 400px;
    }

    .product-info {
        padding: 1rem 0;
    }
}

@@media (max-width: 768px) {
    .breadcrumb-section {
        min-height: 150px;
    }

    .main-image-container {
        height: 300px;
    }

    .thumbnail-wrapper {
        height: 80px;
    }

    .action-buttons .row {
        flex-direction: column;
    }

    .action-buttons .col-md-8,
    .action-buttons .col-md-4 {
        flex: 0 0 100%;
        max-width: 100%;
    }
}
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Image gallery functionality
        const mainImage = document.getElementById('mainImage');
        const modalImage = document.getElementById('modalImage');
        const thumbnails = document.querySelectorAll('.thumbnail-image');

        // Thumbnail click handlers
        thumbnails.forEach((thumb, index) => {
            thumb.addEventListener('click', function () {
                const newSrc = this.getAttribute('data-image');
                mainImage.src = newSrc;
                modalImage.src = newSrc;

                // Update active thumbnail
                document.querySelectorAll('.thumbnail-wrapper').forEach(wrapper => {
                    wrapper.classList.remove('active');
                });
                this.closest('.thumbnail-wrapper').classList.add('active');
            });
        });

        // Set first thumbnail as active
        if (thumbnails.length > 0) {
            thumbnails[0].closest('.thumbnail-wrapper').classList.add('active');
            modalImage.src = mainImage.src;
        }

        // Quantity controls
        const quantityInput = document.querySelector('.quantity-value');
        const quantityBtns = document.querySelectorAll('.quantity-btn');
        const maxQuantity = parseInt(quantityInput.getAttribute('max')) || 999;

        quantityBtns.forEach(btn => {
            btn.addEventListener('click', function () {
                const action = this.getAttribute('data-action');
                let currentValue = parseInt(quantityInput.value) || 1;

                if (action === 'increase' && currentValue < maxQuantity) {
                    quantityInput.value = currentValue + 1;
                } else if (action === 'decrease' && currentValue > 1) {
                    quantityInput.value = currentValue - 1;
                }
            });
        });

        // Add to cart functionality
        const addToCartBtn = document.querySelector('.add-to-cart-btn');
        const addToCartForm = document.querySelector('.add-to-cart-form');

        if (addToCartForm) {
            addToCartForm.addEventListener('submit', function (e) {
                if (addToCartBtn) {
                    // Add loading state
                    addToCartBtn.classList.add('loading');
                    addToCartBtn.querySelector('.spinner-border').classList.remove('d-none');
                    addToCartBtn.disabled = true;

                    // Reset loading state after form submission
                    setTimeout(() => {
                        addToCartBtn.classList.remove('loading');
                        addToCartBtn.querySelector('.spinner-border').classList.add('d-none');
                        addToCartBtn.disabled = false;
                    }, 2000);
                }
            });
        }

        // Wishlist functionality
        const wishlistBtn = document.querySelector('.wishlist-btn');
        if (wishlistBtn) {
            wishlistBtn.addEventListener('click', function () {
                const icon = this.querySelector('i');
                const isActive = this.classList.contains('active');

                if (isActive) {
                    this.classList.remove('active');
                    icon.classList.remove('fas');
                    icon.classList.add('far');
                    this.style.backgroundColor = '';
                    this.style.borderColor = '';
                    this.style.color = '';
                } else {
                    this.classList.add('active');
                    icon.classList.remove('far');
                    icon.classList.add('fas');
                    this.style.backgroundColor = 'var(--danger-color)';
                    this.style.borderColor = 'var(--danger-color)';
                    this.style.color = 'white';
                }

                console.log(isActive ? 'Removed from wishlist' : 'Added to wishlist');
            });
        }

        // Image zoom functionality
        const zoomBtn = document.querySelector('.zoom-btn');
        if (zoomBtn) {
            zoomBtn.addEventListener('click', function () {
                modalImage.src = mainImage.src;
            });
        }

        // Products Slider Functionality
        const sliderTrack = document.getElementById('sliderTrack');
        const sliderItems = document.querySelectorAll('.slider-item');
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn = document.getElementById('nextBtn');
        const prevBtnMobile = document.getElementById('prevBtnMobile');
        const nextBtnMobile = document.getElementById('nextBtnMobile');
        const indicatorsContainer = document.querySelector('.slider-indicators');

        if (sliderItems.length > 0) {
            let currentSlide = 0;
            const itemWidth = 320; // 300px width + 20px margin
            let itemsPerView = Math.floor(window.innerWidth / itemWidth);
            let maxSlides = Math.max(0, sliderItems.length - itemsPerView);

            // Create indicators
            function createIndicators() {
                indicatorsContainer.innerHTML = '';
                const numIndicators = Math.ceil(sliderItems.length / itemsPerView);

                for (let i = 0; i < numIndicators; i++) {
                    const indicator = document.createElement('button');
                    indicator.className = 'slider-indicator';
                    indicator.setAttribute('data-slide', i);
                    if (i === 0) indicator.classList.add('active');
                    indicatorsContainer.appendChild(indicator);
                }
            }

            // Update slider position
            function updateSlider() {
                const translateX = -currentSlide * itemWidth;
                sliderTrack.style.transform = `translateX(${translateX}px)`;

                // Update button states
                if (prevBtn) {
                    prevBtn.disabled = currentSlide === 0;
                    prevBtnMobile.disabled = currentSlide === 0;
                }
                if (nextBtn) {
                    nextBtn.disabled = currentSlide >= maxSlides;
                    nextBtnMobile.disabled = currentSlide >= maxSlides;
                }

                // Update indicators
                const indicators = document.querySelectorAll('.slider-indicator');
                indicators.forEach((indicator, index) => {
                    indicator.classList.toggle('active',
                        Math.floor(currentSlide / itemsPerView) === index
                    );
                });
            }

            // Previous slide
            function prevSlide() {
                if (currentSlide > 0) {
                    currentSlide = Math.max(0, currentSlide - itemsPerView);
                    updateSlider();
                }
            }

            // Next slide
            function nextSlide() {
                if (currentSlide < maxSlides) {
                    currentSlide = Math.min(maxSlides, currentSlide + itemsPerView);
                    updateSlider();
                }
            }

            // Event listeners
            if (prevBtn) {
                prevBtn.addEventListener('click', prevSlide);
                prevBtnMobile.addEventListener('click', prevSlide);
            }

            if (nextBtn) {
                nextBtn.addEventListener('click', nextSlide);
                nextBtnMobile.addEventListener('click', nextSlide);
            }

            // Indicator click handlers
            indicatorsContainer.addEventListener('click', function (e) {
                if (e.target.classList.contains('slider-indicator')) {
                    const slideIndex = parseInt(e.target.getAttribute('data-slide'));
                    currentSlide = slideIndex * itemsPerView;
                    updateSlider();
                }
            });

            // Touch/swipe functionality
            let startX = 0;
            let isDragging = false;

            sliderTrack.addEventListener('touchstart', function (e) {
                startX = e.touches[0].clientX;
                isDragging = true;
            });

            sliderTrack.addEventListener('touchmove', function (e) {
                if (!isDragging) return;
                e.preventDefault();
            });

            sliderTrack.addEventListener('touchend', function (e) {
                if (!isDragging) return;

                const endX = e.changedTouches[0].clientX;
                const diff = startX - endX;

                if (Math.abs(diff) > 50) {
                    if (diff > 0) {
                        nextSlide();
                    } else {
                        prevSlide();
                    }
                }

                isDragging = false;
            });

            // Mouse drag functionality for desktop
            let mouseStartX = 0;
            let isMouseDragging = false;

            sliderTrack.addEventListener('mousedown', function (e) {
                mouseStartX = e.clientX;
                isMouseDragging = true;
                sliderTrack.style.cursor = 'grabbing';
                e.preventDefault();
            });

            document.addEventListener('mousemove', function (e) {
                if (!isMouseDragging) return;
                e.preventDefault();
            });

            document.addEventListener('mouseup', function (e) {
                if (!isMouseDragging) return;

                const endX = e.clientX;
                const diff = mouseStartX - endX;

                if (Math.abs(diff) > 50) {
                    if (diff > 0) {
                        nextSlide();
                    } else {
                        prevSlide();
                    }
                }

                isMouseDragging = false;
                sliderTrack.style.cursor = 'grab';
            });

            // Auto-play functionality
            let autoplayInterval;

            function startAutoplay() {
                autoplayInterval = setInterval(() => {
                    if (currentSlide >= maxSlides) {
                        currentSlide = 0;
                    } else {
                        nextSlide();
                    }
                }, 5000);
            }

            function stopAutoplay() {
                clearInterval(autoplayInterval);
            }

            // Pause autoplay on hover
            const sliderContainer = document.querySelector('.slider-container');
            sliderContainer.addEventListener('mouseenter', stopAutoplay);
            sliderContainer.addEventListener('mouseleave', startAutoplay);

            // Handle window resize
            function handleResize() {
                itemsPerView = Math.floor(window.innerWidth / itemWidth);
                maxSlides = Math.max(0, sliderItems.length - itemsPerView);
                currentSlide = Math.min(currentSlide, maxSlides);
                createIndicators();
                updateSlider();
            }

            window.addEventListener('resize', handleResize);

            // Initialize slider
            createIndicators();
            updateSlider();

            // Start autoplay if there are enough items
            if (sliderItems.length > itemsPerView) {
                startAutoplay();
            }
        }

        // Auto-hide alert messages
        const alerts = document.querySelectorAll('.alert');
        alerts.forEach(alert => {
            setTimeout(() => {
                const bsAlert = new bootstrap.Alert(alert);
                bsAlert.close();
            }, 5000);
        });

        // Smooth scrolling for internal links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });

        // Animate elements on scroll
        const animateOnScroll = () => {
            const elements = document.querySelectorAll('.product-card, .review-card, .feature-item');

            elements.forEach(element => {
                const elementTop = element.getBoundingClientRect().top;
                const elementVisible = 150;

                if (elementTop < window.innerHeight - elementVisible) {
                    element.style.opacity = '1';
                    element.style.transform = 'translateY(0)';
                }
            });
        };

        // Initialize animation
        document.querySelectorAll('.product-card, .review-card').forEach(element => {
            element.style.opacity = '0';
            element.style.transform = 'translateY(20px)';
            element.style.transition = 'all 0.6s ease';
        });

        window.addEventListener('scroll', animateOnScroll);
        animateOnScroll();

        // Input validation
        if (quantityInput) {
            quantityInput.addEventListener('input', function () {
                let value = parseInt(this.value) || 1;
                const min = parseInt(this.getAttribute('min')) || 1;
                const max = parseInt(this.getAttribute('max')) || 999;

                if (value < min) value = min;
                if (value > max) value = max;

                this.value = value;
            });
        }

        // Lazy loading for images
        const imageObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const img = entry.target;
                    if (img.dataset.src) {
                        img.src = img.dataset.src;
                        img.classList.remove('loading');
                        imageObserver.unobserve(img);
                    }
                }
            });
        });

        // Initialize tooltips
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        const tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    });

    // Toast notification function
    function showToast(message, type = 'success') {
        let toastContainer = document.getElementById('toast-container');
        if (!toastContainer) {
            toastContainer = document.createElement('div');
            toastContainer.id = 'toast-container';
            toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
            toastContainer.style.zIndex = '9999';
            document.body.appendChild(toastContainer);
        }

        const toastId = 'toast-' + Date.now();
        const toastHtml = `
        <div class="toast" id="${toastId}" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <i class="fas fa-${type === 'success' ? 'check-circle text-success' : 'exclamation-triangle text-warning'} me-2"></i>
                <strong class="me-auto">Thông báo</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                ${message}
            </div>
        </div>
    `;

        toastContainer.insertAdjacentHTML('beforeend', toastHtml);

        const toastElement = document.getElementById(toastId);
        const toast = new bootstrap.Toast(toastElement);
        toast.show();

        toastElement.addEventListener('hidden.bs.toast', function () {
            this.remove();
        });
    }

    // Function to update cart count
    function updateCartCount() {
        console.log('Cart count updated');
    }
</script>